syntax = "proto3";

package envoy.type;
import "google/protobuf/struct.proto";

import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.merge_all) = true;
option (extproto.equal_all) = true;

option go_package = "github.com/solo-io/protoc-gen-ext/tests/api";


// proto object to test all base objects
message Simple {
    string str = 1;
    bytes byt = 2 [(extproto.sensitive) = true];
    uint32 testUint32 = 3;
    uint64 testUint64 = 4;
    bool testBool = 5;
    double doubleTest = 6;
    float floatTest = 7;
    int32 int32Test = 8;
    int64 int64Test = 9;
    sint32 sint32Test = 10;
    sint64 sint64Test = 11;
    fixed32 fixed32Test = 12;
    fixed64 fixed64Test = 13;
    sfixed32 sfixed32Test = 14;
    sfixed64 sfixed64Test = 15;

    // skipped primitives
    string str_skipped = 16 [(extproto.skip_hashing) = true];
    uint32 int_skipped = 17 [(extproto.skip_hashing) = true];

}

enum Test {
    HELLO = 0;
    WORLD = 1;
}

message Nested {
    Simple simple = 1;

    Simple other_simple = 14;

    Test test = 2;

    Empty empty = 3 [(extproto.sensitive) = true];

    repeated string hello = 4;

    google.protobuf.Struct details = 5;

    Simple skipper = 6 [(extproto.skip_hashing) = true];

    repeated Simple x = 7 [(extproto.sensitive) = true];

    map<string, Simple> initial = 9;

    map<string, string> simple_map = 10 [(extproto.sensitive) = true];

    oneof test_one_of {
        Empty empty_one_of = 11;
        NestedEmpty nested_one_of = 12;
    }

    repeated uint64 repeated_primitive = 13;
}


message Empty {
}

message NestedEmpty {
    Nested nested = 1;
}