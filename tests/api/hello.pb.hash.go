// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: tests/api/hello.proto

package api

import (
	"encoding/binary"
	"errors"
	"fmt"
	"hash"
	"hash/fnv"
	"math"

	safe_hasher "github.com/solo-io/protoc-gen-ext/pkg/hasher"
	"github.com/solo-io/protoc-gen-ext/pkg/hasher/hashstructure"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = math.Float64bits
	_ = new(hash.Hash64)
	_ = fnv.New64
	_ = hashstructure.Hash
	_ = new(safe_hasher.SafeHasher)
)

// Hash function
func (m *Simple) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("envoy.type.github.com/solo-io/protoc-gen-ext/tests/api.Simple")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetStr())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write(m.GetByt()); err != nil {
		return 0, err
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetTestUint32()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetTestUint64()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		if m.GetTestBool() {
			_, err = hasher.Write([]byte{1})
		} else {
			_, err = hasher.Write([]byte{0})
		}
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], math.Float64bits(float64(m.GetDoubleTest())))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], math.Float64bits(float64(m.GetFloatTest())))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetInt32Test()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetInt64Test()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetSint32Test()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetSint64Test()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetFixed32Test()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetFixed64Test()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetSfixed32Test()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetSfixed64Test()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Nested) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("envoy.type.github.com/solo-io/protoc-gen-ext/tests/api.Nested")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetSimple()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Simple")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetSimple(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Simple")); err != nil {
				return 0, err
			}
			var buf [8]byte
			binary.LittleEndian.PutUint64(buf[:], fieldValue)
			if _, err := hasher.Write(buf[:]); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetOtherSimple()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("OtherSimple")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetOtherSimple(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("OtherSimple")); err != nil {
				return 0, err
			}
			var buf [8]byte
			binary.LittleEndian.PutUint64(buf[:], fieldValue)
			if _, err := hasher.Write(buf[:]); err != nil {
				return 0, err
			}
		}
	}

	{
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], uint64(m.GetTest()))
		_, err = hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}
	}

	if h, ok := interface{}(m.GetEmpty()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Empty")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetEmpty(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Empty")); err != nil {
				return 0, err
			}
			var buf [8]byte
			binary.LittleEndian.PutUint64(buf[:], fieldValue)
			if _, err := hasher.Write(buf[:]); err != nil {
				return 0, err
			}
		}
	}

	for _, v := range m.GetHello() {

		if _, err = hasher.Write([]byte(v)); err != nil {
			return 0, err
		}

	}

	if h, ok := interface{}(m.GetDetails()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Details")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetDetails(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Details")); err != nil {
				return 0, err
			}
			var buf [8]byte
			binary.LittleEndian.PutUint64(buf[:], fieldValue)
			if _, err := hasher.Write(buf[:]); err != nil {
				return 0, err
			}
		}
	}

	for _, v := range m.GetX() {

		if h, ok := interface{}(v).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(v, nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("")); err != nil {
					return 0, err
				}
				var buf [8]byte
				binary.LittleEndian.PutUint64(buf[:], fieldValue)
				if _, err := hasher.Write(buf[:]); err != nil {
					return 0, err
				}
			}
		}

	}

	{
		var result uint64
		innerHash := fnv.New64()
		for k, v := range m.GetInitial() {
			innerHash.Reset()

			if h, ok := interface{}(v).(safe_hasher.SafeHasher); ok {
				if _, err = innerHash.Write([]byte("")); err != nil {
					return 0, err
				}
				if _, err = h.Hash(innerHash); err != nil {
					return 0, err
				}
			} else {
				if fieldValue, err := hashstructure.Hash(v, nil); err != nil {
					return 0, err
				} else {
					if _, err = innerHash.Write([]byte("")); err != nil {
						return 0, err
					}
					var buf [8]byte
					binary.LittleEndian.PutUint64(buf[:], fieldValue)
					if _, err := hasher.Write(buf[:]); err != nil {
						return 0, err
					}
				}
			}

			if _, err = innerHash.Write([]byte(k)); err != nil {
				return 0, err
			}

			result = result ^ innerHash.Sum64()
		}
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], result)
		_, err := hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}

	}

	{
		var result uint64
		innerHash := fnv.New64()
		for k, v := range m.GetSimpleMap() {
			innerHash.Reset()

			if _, err = innerHash.Write([]byte(v)); err != nil {
				return 0, err
			}

			if _, err = innerHash.Write([]byte(k)); err != nil {
				return 0, err
			}

			result = result ^ innerHash.Sum64()
		}
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], result)
		_, err := hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}

	}

	for _, v := range m.GetRepeatedPrimitive() {

		{
			var buf [8]byte
			binary.LittleEndian.PutUint64(buf[:], uint64(v))
			_, err = hasher.Write(buf[:])
			if err != nil {
				return 0, err
			}
		}

	}

	for _, v := range m.GetRepeatedExternal() {

		if h, ok := interface{}(v).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(v, nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("")); err != nil {
					return 0, err
				}
				var buf [8]byte
				binary.LittleEndian.PutUint64(buf[:], fieldValue)
				if _, err := hasher.Write(buf[:]); err != nil {
					return 0, err
				}
			}
		}

	}

	{
		var result uint64
		innerHash := fnv.New64()
		for k, v := range m.GetMapExternal() {
			innerHash.Reset()

			if h, ok := interface{}(v).(safe_hasher.SafeHasher); ok {
				if _, err = innerHash.Write([]byte("")); err != nil {
					return 0, err
				}
				if _, err = h.Hash(innerHash); err != nil {
					return 0, err
				}
			} else {
				if fieldValue, err := hashstructure.Hash(v, nil); err != nil {
					return 0, err
				} else {
					if _, err = innerHash.Write([]byte("")); err != nil {
						return 0, err
					}
					var buf [8]byte
					binary.LittleEndian.PutUint64(buf[:], fieldValue)
					if _, err := hasher.Write(buf[:]); err != nil {
						return 0, err
					}
				}
			}

			if _, err = innerHash.Write([]byte(k)); err != nil {
				return 0, err
			}

			result = result ^ innerHash.Sum64()
		}
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], result)
		_, err := hasher.Write(buf[:])
		if err != nil {
			return 0, err
		}

	}

	switch m.TestOneOf.(type) {

	case *Nested_EmptyOneOf:

		if h, ok := interface{}(m.GetEmptyOneOf()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("EmptyOneOf")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetEmptyOneOf(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("EmptyOneOf")); err != nil {
					return 0, err
				}
				var buf [8]byte
				binary.LittleEndian.PutUint64(buf[:], fieldValue)
				if _, err := hasher.Write(buf[:]); err != nil {
					return 0, err
				}
			}
		}

	case *Nested_NestedOneOf:

		if h, ok := interface{}(m.GetNestedOneOf()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("NestedOneOf")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetNestedOneOf(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("NestedOneOf")); err != nil {
					return 0, err
				}
				var buf [8]byte
				binary.LittleEndian.PutUint64(buf[:], fieldValue)
				if _, err := hasher.Write(buf[:]); err != nil {
					return 0, err
				}
			}
		}

	case *Nested_PrimitiveOneOf:

		if _, err = hasher.Write([]byte(m.GetPrimitiveOneOf())); err != nil {
			return 0, err
		}

	case *Nested_BytesOneOf:

		if _, err = hasher.Write(m.GetBytesOneOf()); err != nil {
			return 0, err
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Empty) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("envoy.type.github.com/solo-io/protoc-gen-ext/tests/api.Empty")); err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *NestedEmpty) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("envoy.type.github.com/solo-io/protoc-gen-ext/tests/api.NestedEmpty")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetNested()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Nested")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetNested(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Nested")); err != nil {
				return 0, err
			}
			var buf [8]byte
			binary.LittleEndian.PutUint64(buf[:], fieldValue)
			if _, err := hasher.Write(buf[:]); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}
